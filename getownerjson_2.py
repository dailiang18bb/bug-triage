# -*- coding: utf-8 -*-
"""GetOwnerJSON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tUJW4Px9QkbbaTX5jHJGzdNkCXX77wTL
"""

# libraries (!!!Only run it on Colab!!!)
# !pip install beautifulsoup4
# import nltk
# nltk.download('punkt')
# from google.colab import drive
# drive.mount('/content/gdrive')

# Initialize libraries
import datetime, os
import numpy as np
from bs4 import BeautifulSoup
from lxml import html
import xml
import requests
import json, re, string, nltk

# Initialize variables
# closed_bugs_json = 'C:\dataset\TrainData.json'
closed_bugs_json = 'gdrive/My Drive/test/deep_data.json'
# process the error list
# closed_bugs_json = 'webData_error.json'

web_data_file_address = 'webData.json'

# open webData file
if os.path.isfile(web_data_file_address):
  with open(web_data_file_address) as f:
    owner_dict = json.load(f)
    f.close()
else:
  owner_dict = {}

# tracking error
error_track = []

# get the onwer string

with open(closed_bugs_json) as data_file:
  data = json.load(data_file, strict=False)

all_owner = []
for item in data:
  all_owner.append(item['owner'])

uq_owner = list(filter(None, all_owner))
uq_owner = list(dict.fromkeys(uq_owner))

# function write into dictionary
def writeDict(owner, words, owner_dict):
  owner_dict[owner] = words
  return owner_dict

# go crawl
for i, owner in enumerate(uq_owner, start = 1):
  if owner not in owner_dict:
    base_url = 'https://monorail-prod.appspot.com/p/chromium/issues/list?can=1&q='
    url = base_url + owner
    try:
        # Get the webpage
        f = requests.get(url, timeout=5)

        # Using proxy
        # s = requests.Session()
        # s.proxies = {"http": "http://61.233.25.166:80"}
        # f = s.get(url)

        soup = BeautifulSoup(f.content, "lxml")

        # Get the key words
        res = []
        for keywords in soup.find_all('td', class_='col_8'):
            a = (keywords.find_all('span'))
            b = str(a[0].string).split()
            for val in b:
                res.append(val)
        unique_result = list(set(res))
        owner_dict = writeDict(owner, unique_result, owner_dict)
        print(i, "success")
    except requests.exceptions.RequestException as e:
        error_track.append({"owner": owner, "fail_time": datetime.datetime.now()})
        print (i, "time out, write into error list")
  else:
    print(i, "record exists, pass.")

# write success into JSON
with open('webData.json', 'w') as outfile:
  json.dump(owner_dict, outfile)
  outfile.close()

# write error_track into JSON
with open('webData_error.json', 'w') as outfile:
  json.dump(error_track, outfile, default=str)
  outfile.close()

